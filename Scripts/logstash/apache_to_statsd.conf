# This config will pull log updates from a single file and push stats to a statsd instance
# For a description of the life of an event, see: http://logstash.net/docs/1.1.1/life-of-an-event

input {
  file {
    # The type field is very important as it uniquely identifies "pipes"
    # These "pipes" are used to determine which filter and/or output steps will be applied
    type => "apache-access"

    # fill in your own path/s
    path => "/var/log/apache2/other_vhosts_access.log"
  }
}

filter {
  grok {
    type => "apache-access"
    # See the following URL for a complete list of named patterns
    # logstash/grok ships with by default:
    # https://github.com/logstash/logstash/tree/master/patterns
    #
    # The grok filter will use the below pattern and on successful match use
    # any captured values as new fields in the event.
    pattern => "%{COMBINEDAPACHELOG}"
  }

  date {
    type => "apache-access"
    # Try to pull the timestamp from the 'timestamp' field (parsed above with
    # grok). The apache time format looks like: "18/Aug/2011:05:44:34 -0700"
    timestamp => "dd/MMM/yyyy:HH:mm:ss Z"
  }
}

output {
  statsd {
    # some ip address goes here in double quotes
    host => "192.168.10.62"

    # this will push a metric increment for each distinct response code
    # for example, we normally have the following metrics:
    # apache2.response.200
    # apache2.response.304
    # apache2.response.404    
    increment => "apache2.response.%{response}"

    # this will increase a counter by the transmitted bytes for each request
    count => [ "apache2.bytes", "%{bytes}" ]
  }
}
